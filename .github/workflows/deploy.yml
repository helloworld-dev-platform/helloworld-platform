name: backend_deploy

# main 브랜치에 push 이벤트 발생 시 실행
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: [ self-hosted ]
    env:
      NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --------------------------------------------------------
      # 1) 빌드 & 배포: 오류 나도 바로 실패 처리하지 않고 다음 스텝에서 판단
      - name: Build & start containers
        id: deploy-step
        continue-on-error: true
        run: |
          docker compose up -d --build

      # --------------------------------------------------------
      # 2) 롤백 (빌드/배포 실패 시 이전 이미지로 복구)
      - name: Rollback to last successful version
        if: ${{ steps.deploy-step.outcome != 'success' }}
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "Deployment failed - rolling back to last known good state"
          docker compose down
          docker compose up -d --no-build
          exit 1

      # --------------------------------------------------------
      # 3) ngrok 터널링 (배포 성공 시에만 실행됩니다)
      - name: Start ngrok tunnels
        id: ngrok
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          
          # ngrok 다운로드
          Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
          Expand-Archive ngrok.zip -DestinationPath .

          # ngrok.yml을 config로 터널 시작
          Start-Process -FilePath .\ngrok.exe -ArgumentList "start --all --config ngrok.yml --log=stdout" -RedirectStandardOutput ngrok.log -NoNewWindow
          Start-Sleep -Seconds 5
          
          # 4040 API에서 퍼블릭URL 조회
          $data = Invoke-RestMethod http://127.0.0.1:4040/api/tunnels
          $api = ($data.tunnels | Where-Object { $_.name -eq "api" }).public_url
          $ws  = ($data.tunnels | Where-Object { $_.name -eq "ws" }).public_url
          
          # GitHub Actions Outputs 설정
          "api_url=$api" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "ws_url=$ws"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Show public URLs
        shell: powershell
        run: |
          Write-Host "REST API    ${{ steps.ngrok.outputs.api_url }}"
          Write-Host "WebSocket   ${{ steps.ngrok.outputs.ws_url }}"

      # --------------------------------------------------------
      # 4) 배포 성공 시 Discord 알림
      - name: Discord Notification (Success)
        if: ${{ success() }}
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          $webhook = $env:DISCORD_WEBHOOK_URL
          $content = @"
                배포성공!!!!
                • REST API: ${{ steps.ngrok.outputs.api_url }}
                • WebSocket: ${{ steps.ngrok.outputs.ws_url }}
                "@
          $body = @{ content = $content } | ConvertTo-Json
          Invoke-RestMethod -Uri $webhook -Method Post -ContentType 'application/json' -Body $body

      # --------------------------------------------------------
      # 5) 배포 실패 시 Discord 알림 (롤백 직후 실행)
      - name: Discord Notification (Failure)
        if: ${{ failure() }}
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          $webhook = $env:DISCORD_WEBHOOK_URL
          $content = "배포 실패! 롤백 완료."
          $body = @{ content = $content } | ConvertTo-Json
          Invoke-RestMethod -Uri $webhook -Method Post -ContentType 'application/json' -Body $body
