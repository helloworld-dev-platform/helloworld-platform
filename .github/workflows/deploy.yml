name: Deploy to NCP Server

# main 브랜치에 push 이벤트 발생 시 실행
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      REGISTRY: docker.io
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      IMAGE_NAMES: "backend-server,websocket-server"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 1. 롤백을 위한 이전 버전 백업 (Docker Hub에 :previous 태그로 저장)
      - name: Backup latest to previous tag
        shell: bash
        continue-on-error: true # 첫 배포 시 latest 이미지가 없어 실패하므로 오류를 무시하고 계속 진행
        run: |
          for imageName in $(echo $IMAGE_NAMES | sed "s/,/ /g")
          do
            echo "Backing up latest version of $imageName to previous tag..."
            docker pull ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/$imageName:latest || true
            docker tag ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/$imageName:latest ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/$imageName:previous || true
            docker push ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/$imageName:previous || true
          done

      # --------------------------------------------------------
      # 2) Docker 이미지 빌드 및 푸시 (CI과정)
      - name: Build, Push backend-server images with cache
        uses: docker/build-push-action@v5
        with:
          context: ./backend-api
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/backend-server:latest
          cache-from: type=gha,scope=${{ github.workflow }}-${{ github.job }}-backend-server
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}-${{ github.job }}-backend-server


      - name: Build and push websocket-server image with cache
        uses: docker/build-push-action@v5
        with:
          context: ./websocket-server
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/websocket-server:latest
          cache-from: type=gha,scope=${{ github.workflow }}-${{ github.job }}-websocket-server
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}-${{ github.job }}-websocket-server
      

      # --------------------------------------------------------
      # 3) NCP 서버 접속하여 배포(CD과정)
      - name: Deploy to NCP Server
        id: deploy_latest
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USERNAME }}
          key: ${{ secrets.NCP_SSH_PRIVATE_KEY }}
          script: |
            set -e  # 스크립트 내의 명령어 중 하나라도 실패하면 스크립트 중단
            cd ~/dev/helloworld-platform
            
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
            echo "IMAGE_TAG=latest" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
      
            docker-compose pull
            docker-compose up -d
            docker image prune -f
          
      # --------------------------------------------------------
      # 4. 배포 실패 시 이전 버전으로 롤백
      - name: Rollback to previous version on failure
        if: failure() && steps.deploy_latest.outcome == 'failure'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USERNAME }}
          key: ${{ secrets.NCP_SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "Deployment failed. Rolling back to previous version..."
            cd ~/dev/helloworld-platform
            
            sed -i 's/^IMAGE_TAG=.*/IMAGE_TAG=previous/' .env
            
            docker-compose pull
            docker-compose up -d

      # --------------------------------------------------------
      # 5) 배포 성공 시 Discord 알림
      - name: Discord Notification (Success)
        if: ${{ success() }}
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: "✅ 배포 성공!"
          description: |
            • REST API: http://${{ secrets.NCP_SERVER_HOST }}:8081
            • WebSocket: http://${{ secrets.NCP_SERVER_HOST }}:8091
          color: 65280 #green
          username: Deploy Bot

      # --------------------------------------------------------
      # 6) 배포 실패 시 Discord 알림 (롤백 직후 실행)
      - name: Discord Notification (Failure)
        if: ${{ failure() }}
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: "🚨 배포실패"
          description: "NCP 서버 배포 중 오류가 발생했습니다. Actions 로그를 확인해주세요."
          color: 16711680 #Red
          username: Deploy Bot